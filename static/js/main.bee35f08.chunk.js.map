{"version":3,"sources":["store/actionTypes.js","store/app.reducers.js","store/utils.js","serviceWorker.js","components/Calculator.js","core/keyMap.js","App.js","store/app.actions.js","index.js"],"names":["Input","Remove_Extra_Zeroes","Update_Display","Remove_Extra_Ops","Remove_Initial_Ops","Handle_Decimal_Input","Handle_Pos_Neg_Input","Handle_Percent_Input","Get_Answer","All_Clear","Clear","Memory_Plus","Memory_Minus","Memory_Recall","initialState","input","display","subDisplay","memoryTotal","MAX_RESULT","state","action","newInput","slice","payload","updateInput","removeExtraZeroes","removeExtraOps","isNaN","last","test","removeInitialOps","shift","handleDecimalInput","lastIndexOfOp","forEach","op","k","lastIndexOf","length","push","handlePosNegInput","unshift","handlePercentInput","updateDisplay","newDisplay","join","Object","assign","getAnswer","result","eval","toFixed","toExponential","allClear","clear","memoryUpdate","isAdd","newMemoryTotal","memoryPlus","memoryMinus","memoryRecall","lastInput","toString","reducer","type","types","arr","Array","isArray","Boolean","window","location","hostname","match","calculator","props","handleClick","className","id","onClick","e","target","href","rel","KEY_MAP","App","handleKeyDown","which","handleInput","nodeName","innerText","handleNumberInput","includes","handleOperatorInput","num","pushToInput","operator","render","document","addEventListener","this","removeEventListener","Component","connect","dispatch","actions","store","createStore","appReducer","app","StrictMode","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bee35f08.chunk.js","sourcesContent":["export const Input = 'Input';\r\nexport const Remove_Extra_Zeroes = 'Remove Extra Zeroes';\r\nexport const Update_Display = 'Update Display';\r\nexport const Remove_Extra_Ops = 'Remove Extra Ops';\r\nexport const Remove_Initial_Ops = 'Remove Initial Ops';\r\nexport const Handle_Decimal_Input = 'Handle Decimal Input';\r\nexport const Handle_Pos_Neg_Input = 'Handle Pos Neg Input';\r\nexport const Handle_Percent_Input = 'Handle Percent Input'\r\nexport const Get_Answer = 'Get Answer';\r\nexport const All_Clear = 'All Clear';\r\nexport const Clear = 'Clear';\r\nexport const Memory_Plus = 'Memory Plus';\r\nexport const Memory_Minus = 'Memory Minus';\r\nexport const Memory_Recall = 'Memory Recall'\r\n\r\n\r\n","import * as types from \"./actionTypes\";\r\nimport { last, updateInput } from \"./utils\";\r\n\r\nconst initialState = {\r\n  input: [],\r\n  display: \"0\",\r\n  subDisplay: \"Ans\",\r\n  memoryTotal: 0,\r\n};\r\n\r\nconst MAX_RESULT = 999999999999;\r\n\r\nconst input = (state, action) => {\r\n  const newInput = [...state.input.slice(), action.payload];\r\n\r\n  return updateInput(state, newInput);\r\n};\r\n\r\nconst removeExtraZeroes = (state) => {\r\n  if (state.input[0] === \"0\" && state.input[1] !== \".\") {\r\n    const newInput = state.input.slice(0, -1);\r\n\r\n    return updateInput(state, newInput);\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst removeExtraOps = (state) => {\r\n  const pattern = /\\+|-|\\*|\\//;\r\n  if (isNaN(last(state.input)) && pattern.test(last(state.input))) {\r\n    const newInput = state.input.slice(0, -1);\r\n\r\n    return updateInput(state, newInput);\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst removeInitialOps = (state) => {\r\n  // prevent initial ops except for + / -\r\n  if (state.input[0] === \"*\" || state.input[0] === \"/\") {\r\n    const newInput = state.input.slice();\r\n    newInput.shift();\r\n\r\n    return updateInput(state, newInput);\r\n    \r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst handleDecimalInput = (state) => {\r\n  /**\r\n   * Only allow a decimal point to be entered if there is an operator following a previous decimal\r\n   * or if there is no operator or decimal\r\n   */\r\n\r\n  let lastIndexOfOp = -1;\r\n  [\"/\", \"*\", \"-\", \"+\"].forEach((op) => {\r\n    let k = state.input.lastIndexOf(op);\r\n    if (k > lastIndexOfOp) {\r\n      lastIndexOfOp = k;\r\n    }\r\n  });\r\n\r\n  if (lastIndexOfOp >= state.input.lastIndexOf(\".\")) {\r\n    const newInput = state.input.slice();\r\n    if (state.input.length === 0) {\r\n      newInput.push(\"0\");\r\n    }\r\n    newInput.push(\".\");\r\n\r\n    return updateInput(state, newInput);\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst handlePosNegInput = (state) => {\r\n  const newInput = state.input.slice();\r\n\r\n  if (state.input[0] === \"+\") {\r\n    newInput.shift();\r\n    newInput.unshift(\"-\");\r\n  } else if (state.input[0] === \"-\") {\r\n    newInput.shift();\r\n    newInput.unshift(\"+\");\r\n  } else {\r\n    newInput.unshift(\"-\");\r\n  }\r\n\r\n  return updateInput(state, newInput);\r\n};\r\n\r\nconst handlePercentInput = (state) => {\r\n  const newInput = state.input.slice();\r\n  if (state.input.length !== 0) {\r\n    newInput.push(\"/\", 100);\r\n\r\n    return updateInput(state, newInput);\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n\r\nconst updateDisplay = (state) => {\r\n  const newDisplay = state.input.length === 0 ? \"0\" : state.input.join(\"\");\r\n\r\n  return Object.assign({}, state, {\r\n    display: newDisplay,\r\n  });\r\n};\r\n\r\nconst getAnswer = (state) => {\r\n  // eslint-disable-next-line no-eval\r\n  let result = eval(state.input.join(\"\"));\r\n  result = +result.toFixed(9);\r\n  if (result > MAX_RESULT) {\r\n    result = result.toExponential(2);\r\n  }\r\n\r\n  return Object.assign({}, state, {\r\n    display: result,\r\n    input: [],\r\n  });\r\n};\r\n\r\nconst allClear = (state) => {\r\n  return Object.assign({}, state, {\r\n    input: [],\r\n    display: \"0\",\r\n    subDisplay: \"Ans\",\r\n    memoryTotal: 0,\r\n  });\r\n};\r\n\r\nconst clear = (state) => {\r\n  const newInput = state.input.slice(0, -1);\r\n  return updateInput(state, newInput);\r\n};\r\n\r\nconst memoryUpdate = (state, isAdd) => {\r\n  if (!isNaN(state.display)) {\r\n    const newMemoryTotal = isAdd ? \r\n      state.memoryTotal + +state.display :\r\n      state.memoryTotal - +state.display;\r\n\r\n    return Object.assign({}, state, {\r\n      memoryTotal: newMemoryTotal,\r\n      input: [],\r\n      subDisplay: `memory: ${newMemoryTotal}`, \r\n      display: '0'\r\n    })\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n\r\nconst memoryPlus = (state) => {\r\n  return memoryUpdate(state, true);\r\n}\r\n\r\nconst memoryMinus = (state) => {\r\n  return memoryUpdate(state, false);\r\n}\r\n\r\nconst memoryRecall = (state) => {\r\n  const newInput = state.input.slice();\r\n  const lastInput = last(state.input);\r\n\r\n  if (isNaN(lastInput) && lastInput !== '.') {\r\n    newInput.push(state.memoryTotal.toString());\r\n\r\n    return updateInput(state, newInput);\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.Input:\r\n      return input(state, action);\r\n\r\n    case types.Remove_Extra_Zeroes:\r\n      return removeExtraZeroes(state);\r\n\r\n    case types.Remove_Extra_Ops:\r\n      return removeExtraOps(state);\r\n\r\n    case types.Remove_Initial_Ops:\r\n      return removeInitialOps(state);\r\n\r\n    case types.Handle_Decimal_Input:\r\n      return handleDecimalInput(state);\r\n\r\n    case types.Handle_Pos_Neg_Input:\r\n      return handlePosNegInput(state);\r\n\r\n    case types.Handle_Percent_Input: \r\n      return handlePercentInput(state);\r\n\r\n    case types.Update_Display:\r\n      return updateDisplay(state);\r\n\r\n    case types.Get_Answer:\r\n      return getAnswer(state);\r\n\r\n    case types.All_Clear:\r\n      return allClear(state);\r\n\r\n    case types.Clear:\r\n      return clear(state);\r\n\r\n    case types.Memory_Plus: \r\n      return memoryPlus(state);\r\n\r\n    case types.Memory_Minus: \r\n      return memoryMinus(state);\r\n\r\n    case types.Memory_Recall: \r\n      return memoryRecall(state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export const last = (arr) => {\r\n    if (Array.isArray(arr) && arr.length > 0) {\r\n        return arr[arr.length - 1];\r\n    }\r\n\r\n}\r\n\r\nexport const updateInput = (state, newInput) => {\r\n    return Object.assign({}, state, {\r\n      input: newInput\r\n    })\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"./Calculator.scss\";\r\n\r\nconst calculator = (props) => {\r\n  const { display, subDisplay, handleClick } = props;\r\n  return (\r\n    <div className=\"calculator\">\r\n      <h2>WILLIS JS500i ELECTRONIC</h2>\r\n      <div className=\"screen\">\r\n        <p className=\"display-primary\">{display}</p>\r\n        <p id=\"subDisplay\" className=\"display-secondary\">\r\n          {subDisplay}\r\n        </p>\r\n      </div>\r\n      <hr></hr>\r\n      <div className=\"keypad\" onClick={(e) => handleClick(e.target)}>\r\n        <button>MR</button>\r\n        <button>M+</button>\r\n        <button>M-</button>\r\n        <button>%</button>\r\n        <button className=\" op-btn\">/</button>\r\n        <a\r\n          href=\"https://github.com/ARWL2016/react-calculator\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <button>Git</button>\r\n        </a>\r\n        <button className=\"number-btn\">7</button>\r\n        <button className=\"number-btn\">8</button>\r\n        <button className=\"number-btn\">9</button>\r\n        <button className=\"op-btn\">*</button>\r\n        <button>+/-</button>\r\n        <button className=\"number-btn\">4</button>\r\n        <button className=\"number-btn\">5</button>\r\n        <button className=\"number-btn\">6</button>\r\n        <button className=\"op-btn\">-</button>\r\n        <button className=\"clear-btn\">C</button>\r\n        <button className=\"number-btn\">1</button>\r\n        <button className=\"number-btn\">2</button>\r\n        <button className=\"number-btn\">3</button>\r\n        <button className=\"op-btn plus-btn\">+</button>\r\n        <button className=\"clear-btn\">AC</button>\r\n        <button className=\"number-btn\">0</button>\r\n        <button>.</button>\r\n        <button>=</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default calculator;\r\n","export const KEY_MAP = {\r\n    \"13\": \"=\",\r\n    \"32\": \"AC\",\r\n    \"96\": \"0\",\r\n    \"97\": \"1\",\r\n    \"98\": \"2\",\r\n    \"99\": \"3\",\r\n    \"100\": \"4\",\r\n    \"101\": \"5\",\r\n    \"102\": \"6\",\r\n    \"103\": \"7\",\r\n    \"104\": \"8\",\r\n    \"105\": \"9\",\r\n    \"106\": \"*\",\r\n    \"107\": \"+\",\r\n    \"109\": \"-\",\r\n    \"110\": \".\",\r\n    \"111\": \"/\"\r\n};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/app.actions\";\nimport Calculator from \"./components/Calculator\";\nimport { KEY_MAP } from \"./core/keyMap\";\n\nclass App extends Component {\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  handleKeyDown = (e) => {\n    const input = KEY_MAP[e.which];\n\n    if (input) {\n      this.handleInput(input);\n    }\n  };\n\n  handleClick = (target) => {\n    const { nodeName, innerText } = target;\n    if (nodeName === \"BUTTON\") {\n      this.handleInput(innerText);\n    }\n  };\n\n  handleInput = (input) => {\n    switch (input) {\n      case \".\":\n        this.props.handleDecimalInput();\n        this.props.updateDisplay();\n        break;\n      case \"%\":\n        this.props.removeExtraOps();\n        this.props.handlePercentInput();\n        this.props.updateDisplay();\n        break;\n      case \"+/-\":\n        this.props.handlePosNegInput();\n        this.props.updateDisplay();\n        break;\n      case \"=\":\n        if (this.props.input.length > 2) {\n          this.props.removeExtraOps();\n          this.props.getAnswer();\n        }\n        break;\n      case \"AC\":\n        this.props.allClear();\n        break;\n      case \"C\":\n        this.props.clear();\n        this.props.updateDisplay();\n        break;\n      case \"M+\":\n        this.props.memoryPlus();\n        break;\n      case \"M-\":\n        this.props.memoryMinus();\n        break;\n      case \"MR\":\n        this.props.memoryRecall();\n        this.props.updateDisplay();\n        break;\n      default:\n        if (input.match(/[0-9]/) && this.props.input.length <= 45) {\n          this.handleNumberInput(input);\n        } else if ([\"+\", \"-\", \"/\", \"*\"].includes(input)) {\n          this.handleOperatorInput(input);\n        }\n    }\n\n  };\n\n  handleNumberInput = (num) => {\n    this.props.pushToInput(num);\n\n    if (num === \"0\") {\n      this.props.removeExtraZeroes();\n    }\n    this.props.updateDisplay();\n  };\n\n  handleOperatorInput = (operator) => {\n    this.props.removeExtraOps();\n    this.props.pushToInput(operator);\n    this.props.removeInitialOps();\n    this.props.updateDisplay();\n  };\n\n  render = () => {\n    return (\n      <Calculator\n        display={this.props.display}\n        subDisplay={this.props.subDisplay}\n        handleClick={this.handleClick}\n      />\n    );\n  };\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    input: state.input,\n    display: state.display,\n    subDisplay: state.subDisplay,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    pushToInput: (input) => dispatch(actions.pushToInput(input)),\n    removeExtraZeroes: () => dispatch(actions.removeExtraZeroes()),\n    updateDisplay: () => dispatch(actions.updateDisplay()),\n    removeExtraOps: () => dispatch(actions.removeExtraOps()),\n    removeInitialOps: () => dispatch(actions.removeInitialOps()),\n    handleDecimalInput: () => dispatch(actions.handleDecimalInput()),\n    handlePosNegInput: () => dispatch(actions.handlePosNegInput()),\n    handlePercentInput: () => dispatch(actions.handlePercentInput()),\n    getAnswer: () => dispatch(actions.getAnswer()),\n    allClear: () => dispatch(actions.allClear()),\n    clear: () => dispatch(actions.clear()),\n    memoryPlus: () => dispatch(actions.memoryPlus()),\n    memoryMinus: () => dispatch(actions.memoryMinus()),\n    memoryRecall: () => dispatch(actions.memoryRecall()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as types from './actionTypes';\r\n\r\nexport const pushToInput = (input) => {\r\n    return {\r\n        type: types.Input,\r\n        payload: input\r\n    }\r\n}\r\n\r\nexport const removeExtraZeroes = () => {\r\n    return {\r\n        type: types.Remove_Extra_Zeroes\r\n\r\n    }\r\n}\r\n\r\nexport const removeExtraOps = () => {\r\n    return {\r\n        type: types.Remove_Extra_Ops\r\n\r\n    }\r\n}\r\n\r\nexport const removeInitialOps = () => {\r\n    return {\r\n        type: types.Remove_Initial_Ops\r\n    }\r\n}\r\n\r\nexport const handleDecimalInput = () => {\r\n    return {\r\n        type: types.Handle_Decimal_Input\r\n    }\r\n}\r\n\r\nexport const handlePosNegInput = () => {\r\n    return {\r\n        type: types.Handle_Pos_Neg_Input\r\n    }\r\n}\r\n\r\nexport const handlePercentInput = () => {\r\n    return {\r\n        type: types.Handle_Percent_Input\r\n    }\r\n}\r\n\r\nexport const updateDisplay = () => {\r\n    return {\r\n        type: types.Update_Display\r\n    }\r\n}\r\n\r\nexport const getAnswer = () => {\r\n    return {\r\n        type: types.Get_Answer\r\n    }\r\n}\r\n\r\nexport const allClear = () => {\r\n    return {\r\n        type: types.All_Clear\r\n    }\r\n}\r\n\r\nexport const clear = () => {\r\n    return {\r\n        type: types.Clear\r\n    }\r\n}\r\n\r\nexport const memoryPlus = () => {\r\n    return {\r\n        type: types.Memory_Plus\r\n    }\r\n}\r\n\r\nexport const memoryMinus = () => {\r\n    return {\r\n        type: types.Memory_Minus\r\n    }\r\n}\r\n\r\nexport const memoryRecall = () => {\r\n    return {\r\n        type: types.Memory_Recall\r\n    }\r\n}\r\n\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport appReducer from \"./store/app.reducers\";\n\nconst store = createStore(appReducer);\n\nconst app = (\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}